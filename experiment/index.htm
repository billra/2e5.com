<!DOCTYPE html>
<html>
<HEAD>
<TITLE>SVG interaction</TITLE>
<meta charset="utf-8">
<meta name="author" content="Bill Ola Rasmussen"> 
</HEAD>
<body>

<p>experiment</p>

<p>stage 1: click and drag balls</p>

<script type="text/javascript">

// svg object wiring
function WireSvgChange(svgid, htmXid, htmYid) {
	// lookups called only once
	console.log('svg wire: ' + svgid + ' ' + htmXid + ' ' + htmYid);
	var svgobj=document.getElementById(svgid);
	var htmXobj=document.getElementById(htmXid);
	var htmYobj=document.getElementById(htmYid);

	// track old positions
	var oldX,oldY; // strategy: track mouse move offset, add to object position
	var oldColor;

	// mouse down on actual svg object
	svgobj.onmousedown = function(evt){ // todo: don't need evt, use enclosing variables
		console.log('svg event: ' + svgid + ' ' + htmXid + ' ' + htmYid);
		evt.preventDefault(); // disable Firefox drag handling
		oldX=evt.clientX;
		oldY=evt.clientY;
		oldColor=svgobj.getAttribute("fill");
		svgobj.setAttribute("fill","green");
		// update html
		name=svgobj.getAttribute('id');
		document.getElementById("theName").innerHTML = name;

		// move tracked from svg container so we don't get a premature onmouseleave
		svgContainer.onmousemove = function(evt) { // todo: don't need evt, use enclosing variables
			evt.preventDefault(); // disable Firefox drag handling
			nowX=parseInt(svgobj.getAttribute('cx'))+evt.clientX-oldX;
			nowY=parseInt(svgobj.getAttribute('cy'))+evt.clientY-oldY;
			oldX=evt.clientX;
			oldY=evt.clientY;
			svgobj.setAttribute("cx",nowX);
			svgobj.setAttribute("cy",nowY);
			// update html
			name=svgobj.getAttribute('id');
			// almost OOP, select html element based on svg element name
			document.getElementById(name+"Xpos").innerHTML = nowX;
			document.getElementById(name+"Ypos").innerHTML = nowY;
			// update contents of edit boxes
			document.getElementById(name+"Xpos"+"Edit").value = nowX;
			document.getElementById(name+"Ypos"+"Edit").value = nowY;
		};
		// likewise, end move tracked from container
		var endmove = function(evt) {
			console.log('end move: ' + svgid + ' ' + htmXid + ' ' + htmYid);
			svgobj.setAttribute("fill",oldColor);
			// update html
			document.getElementById("theName").innerHTML = 'nothing';
			// unwire svg object events
			svgContainer.onmousemove = null;
			svgContainer.onmouseup = null;
			svgContainer.onmouseleave = null;
		};
		svgContainer.onmouseup=endmove;
		svgContainer.onmouseleave=endmove;
	};
}

// edit control wiring
function WireEditChange(htmid,svgid,svgattr) {
	console.log('wire edit: ' + svgid + ' ' + htmid);
	// lookups called only once
	var svgobj=document.getElementById(svgid);
	var htmobj=document.getElementById(htmid);
	// initial state: edit takes value of svg item
    htmobj.value=svgobj.getAttribute(svgattr);
	// function called for each change
	htmobj.onchange = function(){
		svgobj.setAttribute(svgattr,htmobj.value);
	};
}

window.onload = function() {
	// wire edit boxes to svg attribute
	WireEditChange('yellowCircleXposEdit','yellowCircle','cx');
	WireEditChange('yellowCircleYposEdit','yellowCircle','cy');
	WireEditChange('orangeCircleXposEdit','orangeCircle','cx');
	WireEditChange('orangeCircleYposEdit','orangeCircle','cy');
	// wire svg to edit boxes
	WireSvgChange('yellowCircle','yellowCircleXposEdit','yellowCircleYposEdit');
	WireSvgChange('orangeCircle','orangeCircleXposEdit','orangeCircleYposEdit');

	console.log('end of onload');
};
</script>

<span style="display:inline-block; width:400px; height:400px; border:1px dotted black; padding:1px 1px 1px 1px; overflow:auto; resize:both">
<svg id="svgContainer" style="display: block" width="100%" height="100%">
  <circle id="yellowCircle" style="cursor: move" cx="170" cy="200" r="20" stroke="blue" stroke-width="4" fill="yellow"/>
  <circle id="orangeCircle" style="cursor: move" cx="230" cy="200" r="20" stroke="blue" stroke-width="4" fill="darkorange"/>
</svg>
</span>

<p><span id="theName">nothing</span> selected</p>
<p>yellow position: <span id="yellowCircleXpos">?</span>,<span id="yellowCircleYpos">?</span></p>
<p>orange position: <span id="orangeCircleXpos">?</span>,<span id="orangeCircleYpos">?</span></p>

<form>
<input type="number" id="yellowCircleXposEdit">
<input type="number" id="yellowCircleYposEdit">
</form>

<form>
<input type="number" id="orangeCircleXposEdit">
<input type="number" id="orangeCircleYposEdit">
</form>

</body>
</html>